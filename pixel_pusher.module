<?php

/**
 * Pixel Pusher
 *
 * Integrates with Pixel Ping, a pixel-tracking service from Pro Publica
 * and DocumentCloud that runs on Node.js.
 *
 * http://documentcloud.github.com/pixel-ping/
 * http://www.propublica.org/nerds/item/pixel-ping-a-nodejs-stats-tracker
 *
 * Requires json_decode(), and thus either PHP 5.2 or the json PECL 
 * extension.
 */

/**
 * Implementation of hook_menu().
 */
function pixel_pusher_menu() {
  $items = array();
  
  $items['pixel_pusher/save_hits'] = array(
    'title' => 'Pixel Ping flush callback',
    'page callback' => 'pixel_pusher_save_hits',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  
  $items['admin/config/system/pixel_pusher'] = array(
    'title' => 'Pixel Pusher settings',
    'description' => 'Change the location of where your Pixel Ping instance is running',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pixel_pusher_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer pixel_pusher'),
  );
  
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function pixel_pusher_permission() {
  return array('administer pixel_pusher');
}

/**
 * Admin settings form.
 */
function pixel_pusher_admin_settings() {
  $form['pixel_ping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pixel Ping integration'),
    '#collapsible' => TRUE,
  );
  
  $form['pixel_ping']['pixel_pusher_remote'] = array(
    '#type' => 'textfield',
    '#title' => t('Pixel Ping server'),
    '#default_value' => variable_get('pixel_pusher_remote', 'http://127.0.0.1'),
    '#description' => 'The base URL where the pixel will be served.  Do not include <em>/pixel.gif</em> or a trailing slash; for instance, enter <em>http://something.com:9000</em>.',
  );
  
  $form['pixel_pusher_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable verbose logging'),
    '#default_value' => variable_get('pixel_pusher_debug', 0),
    '#description' => t('<strong>Not recommended for production environments:</strong> Activate this option if you want many debug messages sent to Watchdog.'),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_block_info().
 */
function pixel_pusher_block_info() {
  $blocks = array();

  $blocks['pixel_pusher'] = array(
    'info' => t('Pixel Counter tracker pixel'),
    'weight' => 0,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function pixel_pusher_block_view($delta = '') {
  $block = array();
  
  switch ($delta) {
    case 'pixel_pusher':
      global $node;

      $arg1 = arg(1);
      $arg2 = arg(2);
          
      if ('node' == arg(0) && !empty($arg1) && empty($arg2)) {
        $block['subject'] = FALSE;
        $server_url = variable_get('pixel_pusher_remote', 'http://127.0.0.1');
        $block['content'] = '<img src="' . $server_url . '/pixel.gif?key=node,' . $arg1 . '" width="1" height="1" alt="" />';
      }
          
      return $block;
  }
}

/**
 * Callback for Pixel Ping's flush request.  A 'json'
 * object should be posted with keys and hit counts.
 */
function pixel_pusher_save_hits() {
  if (!empty($_REQUEST['json'])) {
    $results = json_decode($_REQUEST['json'], TRUE);
    if ($results) {
      pixel_pusher_write_hits($results);
      if (variable_get('pixel_pusher_debug', 0)) {
        watchdog('Pixel Ping', print_r($results, TRUE), array(), WATCHDOG_DEBUG);
      }
    }
  }
  else {
    watchdog('Pixel Ping', 'No "json" object received.  Raw data: ' . print_r($_REQUEST, TRUE), array(), WATCHDOG_WARNING);
  }
}

/**
 * Given a parsed $results array from pixel_pusher_save_hits, increment
 * the appropriate nodes.
 *
 * Almost all of this code is copied, with gratitude, from the excellent 
 * boost_stats.php script that ships with the Boost module.
 */
function pixel_pusher_write_hits($results) {

  // Anonymous users always get a User ID of 0.
  $uid = 0;
  
  if (!empty($results)) {
    foreach ($results as $key => $val) {
      
      $path = explode(',', $key);
      
      if ('node' == $path[0] && !empty($path[1])) {
        
        // Mimic the "node view" event.
        $affected = db_update('node_counter')
          ->expression('daycount', 'daycount + :dc', array('dc'=>$val))
          ->expression('totalcount', 'totalcount + :tc', array('tc'=>$val))
          ->fields(array('timestamp'=>time()))
          ->condition('nid', $path[1])
          ->execute();
        
        // If we affected 0 rows, this is the first time viewing the node.
        if (!$affected) {
          db_insert('node_counter')
            ->fields(array(
              'nid' => $path[1],
              'daycount' => $val,
              'totalcount' => $val,
              'timestamp' => time(),
            ))
            ->execute();
        }
        if (variable_get('pixel_pusher_debug', 0)) {
          watchdog('Pixel Pusher', 'Updated node nid=%node by %amount', array('%node' => $path[1], '%amount' => $val));
        }
      }
      
    }
  }  
}
